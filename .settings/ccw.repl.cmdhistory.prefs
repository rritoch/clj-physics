cmdhistory=["*ns*" "(ns Physics)" "(core/foo)" "(foo)" "(ns Physics.core)" "(foo)" "(foo 1)" "(Physics.core/foo 1)" "*ns*" "(ns Physics.core)" "(foo)" "(foo 1)" "(load Physics.core)" "(load \\"Physics.core\\")" "(load \\"core\\")" "(foo 1)" "(load \\"core\\")" "(-main)" "(reload)" "(-main)" "(version)" "(project-version)" "(project)" "*ns*" "(Physics/project-version)" "(Physics.core/project-version)" "(ns Phyics.core)" "(reload)" "*ns*" "(ns Physics.core)" "(-main)" "(reload)" "(-main)" "(reload)" "(-main)" "(reload)" "(restart)" "(reload)" "(copyright)" "(reload)" "(copyright)" "(concat \\"A\\" \\"B\\")" "(str \\"A\\" \\"B\\")" "(reload)" "(author)" "(author-email)" "(copyright)" "(-main)" "(restart)" "(banner)" "(restart)" "{\\"a\\" \:a}" "(map {\\"a\\" \:a} \:a)" "(map \:a {\\"a\\" \:a})" "(map \:a {\:a \\"a\\"})" "(get {\:a \\"a\\"} \:a)" "(get {\:a \\"B\\"} \:a)" "(restart)" "{ width\:1024, height\: 768 }" "(reload)" "(restart)" "(print Physics.config/desktop)" "(print (get Physics.config/desktop Physics.config\:width))" "(print (get Physics.config/desktop Physics.config/\:width))" "(print (get Physics.config/desktop \:width))" "(print (get Physics.config/desktop \:\:width))" "(print Physics.config/desktop)" "(print (get Physics.config/desktop \:Physics.config/width))" "(reload)" "(Physics.desktop/create)" "(reload)" "(Physics.desktop/create)" "(reload)" "(Physics.desktop/create)" "(get Physics.config/desktop \:Physics.config\:width)" "(get Physics.config/desktop \:Physics.config/width)" "(reload)" "(Physics.desktop/create)" "(restart)" "(reload)" "(restart)" "(Physics.desktop.frame)" "(Physics.desktop/frame)" "(print Physics.desktop/frame)" "(Physics.desktop/create)" "(frame/dispatchEvent (new java.awt.event.WindowEvent frame java.awt.event.WindowEvent/WINDOW_CLOSING))" "(load \\"desktop\\")" "(Physics.desktop/create)" "(Physics.desktop/close)" "(print Physics.desktop/frame)" "(load \\"desktop\\")" "(Physics.desktop/create)" "(Physics.desktop/close)" "(Physics.desktop/frame)" "(print Physics.desktop/frame)" "(load \\"desktop\\")" "(Physics.desktop/create)" "(Physics.desktop/close)" "(load \\"desktop\\")" "(Physics.desktop/create)" "(restart)" "(load \\"core\\")" "*ns*" "(load \\"core\\")" "(-main)" "(ns Physics.core)" "(-main)" "(load \\"core\\")" "*ns*" "(Physics.core/-main)" "(load \\"core\\")" "(clojure.crontrib/pwd)" "(clojure.contrib/pwd)" "(clojure.contib.io/pwd)" "(load \\"core\\")" "(load \\"Physics.core\\")" "(load \\"Physics/core\\")" "(Physics.desktop/create)" "(load \\"desktop\\")" "(-main)" "(load \\"core\\")" "(load \\"Physics/core\\")" "(-main)" "(ns Physics.core)" "(-main)" "(Physics.desktop/create)" "*ns*" "(Physics.desktop/create)" "(load \\"desktop\\")" "(Physics.desktop/create)" "(load \\"desktop\\")" "(load \\"config\\")" "(-main)" "'(Physics.desktop/create)" "*ns*" "(ns Physics.core)" "(-main)" "(ns Physics.core)" "(-main)" "(load \\"core\\")" "(-main)" "*ns*" "(load \\"Physics.core\\")" "(load \\"Physics/core\\")" "(Physics.core/-main)" "*ns*" "(ns Physics.core)" "(-main)" "(Physics.core/-main)" "*ns*" "(Physics.core/-main)" "(load \\"core\\")" "(load \\"Physics/core\\")" "(Physics.core/-main)" "*ns*" "(restart)" "(Physics.core/-main)" "*ns*" "(Physics.core/-main)" "*ns*" "(-main)" "(restart)" "(Physics.core/-main)" "(var org.jocl.CL)" "(\:import [org.jocl CL])" "(print \\"hi\\")" "(var \\"hi\\")" "(var org.jocl.CL)" "(new org.jocl.CL)" "(new org.jocl/CL)" "(print \\"hi\\")" "(println (\\"hi\\"))" "(println \\"hi\\")" "(var org.jocl.CL)" "(\:import org.jocl/CL)" "(\:import org.jocl.CL)" "(let [n [0] r (org.jocl.CL/clGetPlatformIDs 0 nil n)] (do\\n  \\n  (println r)\\n  (println n)\\n )\\n  )" "(let [n [0] r -1] (do\\r\\n     (org.jocl.CL/clGetPlatformIDs 0 nil n)\\r\\n     (println r)\\r\\n     (println n)\\r\\n    )\\r\\n)" "(let [n (make-array Integer/TYPE 1) r -1] (do\\r\\n     (org.jocl.CL/clGetPlatformIDs 0 nil n)\\r\\n     (println r)\\r\\n     (println n)\\r\\n    )\\r\\n)" "(let [n (make-array Integer/TYPE 1) r (org.jocl.CL/clGetPlatformIDs 0 nil n)] (do\\r\\n     (println r)\\r\\n     (println n)\\r\\n    )\\r\\n)" "(let [n (make-array Integer/TYPE 1) r (org.jocl.CL/clGetPlatformIDs 0 nil n)] (do\\r\\n     (println r)\\r\\n     (pprint n)\\r\\n    )\\r\\n)" "(let [n (make-array Integer/TYPE 1) r (org.jocl.CL/clGetPlatformIDs 0 nil n)] (do\\r\\n        (println r)\\r\\n        (print n)\\r\\n       )\\r\\n   )" "(let [n (int-array [9999]) r (org.jocl.CL/clGetPlatformIDs 0 nil n)] (do\\r\\n     (println r)\\r\\n     (println n)\\r\\n    )\\r\\n)" "(let [n (int-array [9999]) r (org.jocl.CL/clGetPlatformIDs 0 nil n)] (do\\r\\n     (println r)\\r\\n     (println (get n 0))\\r\\n    )\\r\\n)" "(let [n (int-array [9999]) r (org.jocl.CL/clGetPlatformIDs 0 nil n)] \\r\\n    (get n 0)\\r\\n)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/getPlatformCount)" "(zero? 0)" "(str \\"x \\" 1)" "(load \\"com/vnetpublishing/OpenCL\\")" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/getPlatformCount)" "(\= 1 1)" "(\= 1 0)" "(load \\"com/vnetpublishing/OpenCL\\")" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(assertSuccess 1)" "(com.vnetpublishing.OpenCL.core/assertSuccess 0)" " (load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/assertSuccess 0)" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  0)" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  org.jocl.CL/CL_SUCCESS)" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  org.jocl.CL/CL_INVALID_VALUE)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  org.jocl.CL/CL_INVALID_VALUE)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  org.jocl.CL/CL_INVALID_VALUE)" "(load \\"com/vnetpublishing/OpenCL/core\\")" " (com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  org.jocl.CL/CL_INVALID_VALUE)" " (com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  0\\n                                               )" " (com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  org.jocl.CL/CL_INVALID_VALUE)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\"  org.jocl.CL/CL_INVALID_VALUE)" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\" -1)" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\" 0)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/getPlatformCount)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/assertSuccess(\\"Test\\" org.jocl.CL/CL_INVALID_VALUE))" "(com.vnetpublishing.OpenCL.core/strerror 0)" "(com.vnetpublishing.OpenCL.core/strerror org.jocl.CL/CL_INVALID_VALUE)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\" org.jocl.CL/CL_INVALID_VALUE)" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\" org.jocl.CL/CL_SUCCESS)" "(com.vnetpublishing.OpenCL.core/assertSuccess \\"test\\" -1)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/getPlatformIDs)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/getPlatformIDs)" "(load \\"com/vnetpublishing/OpenCL/core\\")" "(com.vnetpublishing.OpenCL.core/getPlatformIDs)" "(com.vnetpublishing.OpenCL.core/getPlatformCount)" "(aget (com.vnetpublishing.OpenCL.core/getPlatformIDs) 0)" "(aget (com.vnetpublishing.OpenCL.core/getPlatformIDs) 1)" "(aget (com.vnetpublishing.OpenCL.core/getPlatformIDs) 2)" "(aget (com.vnetpublishing.OpenCL.core/getPlatformIDs) 0)" "(.length (com.vnetpublishing.OpenCL.core/getPlatformIDs))" "(alength (com.vnetpublishing.OpenCL.core/getPlatformIDs))" "(ns com.vnetpublishing.OpenCL.core)" "(load \\"core\\")" "(getPlatformID 0)" "(load \\"com/vnetpublishing.OpenCL.core\\")" "(load \\"core\\")" "(getPlatformID 0)" "(getPlatformID 1)" "(getPlatformID 2)" "(load \\"core\\")" "(getPlatformID 0)" "(load \\"core\\")" "(getPlatformID 0)" "(getPlatformID 2)" "(getPlatformID -1)" "(load \\"core\\")" "(getDeviceCount 0 org.jocl.CL/CL_DEVICE_TYPE_ALL)" "(getDeviceCount 1 org.jocl.CL/CL_DEVICE_TYPE_ALL)" "(getDeviceCount 1 org.jocl.CL/CL_DEVICE_TYPE_CUSTOM)" "(load \\"core\\")" "(getDeviceCount 1 org.jocl.CL/CL_DEVICE_TYPE_CUSTOM)" "(load \\"core\\")" "(getDeviceCount 1 org.jocl.CL/CL_DEVICE_TYPE_CUSTOM)" "(getDeviceCount 0 org.jocl.CL/CL_DEVICE_TYPE_CUSTOM)" "(getDeviceCount 1 org.jocl.CL/CL_DEVICE_TYPE_GPU)" "(getDeviceCount 0 org.jocl.CL/CL_DEVICE_TYPE_GPU)" "(getDeviceCount 1 org.jocl.CL/CL_DEVICE_TYPE_CPU)" "(load \\"core\\")" "(getDeviceCount 1 org.jocl.CL/CL_DEVICE_TYPE_CPU)" "(getDeviceCount 0 org.jocl.CL/CL_DEVICE_TYPE_CPU)" "(load \\"core\\")" "(getDeviceCount 0 org.jocl.CL/CL_DEVICE_TYPE_CPU)" "(getDeviceCount 0 org.jocl.CL/CL_DEVICE_TYPE_GPU)" "(make-array 0)" "(make-array org.jocl.cl_platform_id 0)" "(load \\"core\\")" "(alength getDeviceIDs(0 org.jocl.CL/CL_DEVICE_TYPE_ALL))" "(alength (getDeviceIDs 0 org.jocl.CL/CL_DEVICE_TYPE_ALL))" "(load \\"core\\")" "(alength (getDeviceIDs 0 org.jocl.CL/CL_DEVICE_TYPE_ALL))" "(load \\"core\\")" "(alength (getDeviceIDs 0 org.jocl.CL/CL_DEVICE_TYPE_ALL))" "(alength (getDeviceIDs 1 org.jocl.CL/CL_DEVICE_TYPE_ALL))" "(load \\"core\\")" "(getDeviceID 0 org.jocl.CL/CL_DEVICE_TYPE_ALL 0)" "(getDeviceID 0 org.jocl.CL/CL_DEVICE_TYPE_ALL 1)" "(getDeviceID 0 org.jocl.CL/CL_DEVICE_TYPE_ALL 2)" "(meta getDeviceID)" "(meta (getDeviceID(0,org.jocl.CL/CL_DEVICE_TYPE_ALL 1)))" "(meta (getDeviceID 0,org.jocl.CL/CL_DEVICE_TYPE_ALL 1))" " (meta (getDeviceID 0 org.jocl.CL/CL_DEVICE_TYPE_ALL 1))" "(getDeviceID 0 org.jocl.CL/CL_DEVICE_TYPE_ALL 1)" "(meta strerror)" "(meta \:strerror)" "(meta \:\:strerror)" "(meta 1)" "(meta ^{\:doc foo} 1)" "(meta ^{\:doc \\"foo\\"} 1)" "(meta ^{\:doc \\"foo\\"} \\"bar\\")" "*ns*" "(load \\"com/vnetpublishing\\")" "(author)" "(author-email)" "(copyright)" "(name)" "(version)" "(load \\"com/vnetpublishing\\")" "(ns com.vnetpublishing)" "(defn ^String str-cat\\r\\n  [& xs]\\r\\n  (apply str xs))" "(meta str-cat)" "(meta user/str-cat)" "(meta 'str-cat)" "(Sytstem/exit 0)"]
eclipse.preferences.version=1
